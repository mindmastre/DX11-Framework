//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer $Globals
{
    float2  COLORS[9] = { -0.000781250012, 0.000781250012, 0, 0.00708125019, 0.000781250012, 0.000781250012, -0.000781250012, 0, 0, 0, 0.000781250012, 0.000699999975, -0.000781250012, -0.000781250012, 0, -0.000781250012, 0.000781250012, -0.000781250012 };// Offset:    0, size:  136
}

cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
    bool    SSFlag;                     // Offset:  240, size:    4
    bool    SobelFlag;                  // Offset:  244, size:    4
    bool    ToonFlag;                   // Offset:  248, size:    4
    bool    FogFlag;                    // Offset:  252, size:    4
    float   RandomNumber;               // Offset:  256, size:    4
    bool    GlitterFlag;                // Offset:  260, size:    4
    bool    GlassFlag;                  // Offset:  264, size:    4
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

//
// 3 local object(s)
//
Texture2D gDiffuseMap;
Texture2D gNormalMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Light2Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TEXCOORD                 2   xyz         4     NONE  float   xyz 
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyz
                dcl_output o5.xyzw
                dcl_temps 8
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw
                dp4 r4.y, r0.xyzw, cb0[13].xyzw
                mov r0.xyz, v0.xyzx
                mov r5.xyz, -v0.xyzx
                mul r6.xyzw, r5.xxxx, cb0[8].xyzw
                mul r7.xyzw, r5.yyyy, cb0[9].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r5.xyzw, r5.zzzz, cb0[10].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[11].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
                add r5.xyzw, r5.xyzw, r6.xyzw
                mov o0.xyzw, r3.xyzw
                mov o5.xyzw, r5.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o4.xyz, r0.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 32 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float2 COLORS[9];                  // Offset:    0 Size:   136
                //      = 0xba4ccccd 0x3a4ccccd 0x00000000 0x00000000 
                //        0x00000000 0x3be809d5 0x00000000 0x00000000 
                //        0x3a4ccccd 0x3a4ccccd 0x00000000 0x00000000 
                //        0xba4ccccd 0x00000000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3a4ccccd 0x3a378034 0x00000000 0x00000000 
                //        0xba4ccccd 0xba4ccccd 0x00000000 0x00000000 
                //        0x00000000 0xba4ccccd 0x00000000 0x00000000 
                //        0x3a4ccccd 0xba4ccccd 
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   bool SSFlag;                       // Offset:  240 Size:     4
                //   bool SobelFlag;                    // Offset:  244 Size:     4
                //   bool ToonFlag;                     // Offset:  248 Size:     4
                //   bool FogFlag;                      // Offset:  252 Size:     4
                //   float RandomNumber;                // Offset:  256 Size:     4
                //   bool GlitterFlag;                  // Offset:  260 Size:     4
                //   bool GlassFlag;                    // Offset:  264 Size:     4
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // $Globals                          cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                // cbPerObject                       cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TEXCOORD                 2   xyz         4     NONE  float   xyz 
                // TEXCOORD                 1   xyzw        5     NONE  float   xy w
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[17], immediateIndexed
                dcl_constantbuffer cb2[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v4.xyz
                dcl_input_ps linear v5.xyw
                dcl_output o0.xyzw
                dcl_temps 13
                dcl_indexableTemp x0[9], 4
                dcl_indexableTemp x1[9], 4
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb1[12].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w
                div r1.xyz, r1.xyzx, r0.wwww
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                mov r3.xyz, cb2[16].xyzx
                mov r4.xyz, cb2[17].xyzx
                mov r5.xyzw, cb2[18].xyzw
                mov r6.xyz, cb1[0].xyzx
                mov r7.xyz, cb1[1].xyzx
                mov r8.xyz, cb1[2].xyzx
                mov r9.xyz, cb1[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r9.xyz, -r9.xyzx
                mul r6.xyz, r3.xyzx, r6.xyzx
                dp3 r0.w, r9.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r9.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r10.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r10.xyzx
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r5.w
                exp r3.w, r3.w
                mul r9.xyz, r4.xyzx, r0.wwww
                mul r7.xyz, r7.xyzx, r9.xyzx
                mul r9.xyz, r5.xyzx, r3.wwww
                mul r8.xyz, r8.xyzx, r9.xyzx
                movc r7.xyz, r1.wwww, r7.xyzx, l(0,0,0,0)
                movc r8.xyz, r1.wwww, r8.xyzx, l(0,0,0,0)
                mov r6.xyz, r6.xyzx
                mov r7.xyz, r7.xyzx
                mov r8.xyz, r8.xyzx
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r8.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                mov r9.xyz, cb1[4].xyzx
                mov r10.xyz, cb1[5].xyzx
                mov r11.xyz, cb1[6].xyzx
                mov r12.xyz, cb1[7].xyzx
                mov r12.xyz, -r12.xyzx
                mul r3.xyz, r3.xyzx, r9.xyzx
                dp3 r0.w, r12.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx
                dp3 r1.x, r9.xyzx, r1.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r5.w
                exp r1.x, r1.x
                mul r4.xyz, r4.xyzx, r0.wwww
                mul r4.xyz, r10.xyzx, r4.xyzx
                mul r1.xyz, r5.xyzx, r1.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx
                movc r4.xyz, r1.wwww, r4.xyzx, l(0,0,0,0)
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)
                mov r3.xyz, r3.xyzx
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                add r1.xyz, r1.xyzx, r8.xyzx
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r3.xyz, r2.xyzx, r3.xyzx
                add r1.xyz, r1.xyzx, r3.xyzx
                mul r3.w, r2.w, cb2[17].w
                ine r0.w, l(0, 0, 0, 0), cb1[15].x
                ieq r0.w, r0.w, l(-1)
                if_nz r0.w
                  mul r2.xyzw, r2.xyzw, l(1.500000, 1.500000, 1.500000, 1.500000)
                  mov r4.xyz, r1.xyzx
                  mov r5.w, r3.w
                  mov r4.x, r4.x
                  mov r4.x, r4.x
                  mul r0.w, r4.x, r4.x
                  mov r0.w, -r0.w
                  div r4.x, r0.w, l(0.018099)
                  mul r4.x, r4.x, l(1.442695)
                  exp r4.x, r4.x
                  mul r4.x, r4.x, l(4.194744)
                  mul r4.x, r4.x, l(0.233000)
                  div r4.w, r0.w, l(0.136875)
                  mul r4.w, r4.w, l(1.442695)
                  exp r4.w, r4.w
                  mul r4.w, r4.w, l(1.525362)
                  mul r4.w, r4.w, l(0.100000)
                  add r4.x, r4.w, r4.x
                  div r4.w, r0.w, l(0.528836)
                  mul r4.w, r4.w, l(1.442695)
                  exp r4.w, r4.w
                  mul r4.w, r4.w, l(0.776023)
                  mul r4.w, r4.w, l(0.118000)
                  add r4.x, r4.w, r4.x
                  div r4.w, r0.w, l(1.603476)
                  mul r4.w, r4.w, l(1.442695)
                  exp r4.w, r4.w
                  mul r4.w, r4.w, l(0.445660)
                  mul r4.w, r4.w, l(0.113000)
                  add r4.x, r4.w, r4.x
                  div r4.w, r0.w, l(5.627720)
                  mul r4.w, r4.w, l(1.442695)
                  exp r4.w, r4.w
                  mul r4.w, r4.w, l(0.237886)
                  mul r4.w, r4.w, l(0.358000)
                  add r4.x, r4.w, r4.x
                  div r0.w, r0.w, l(20.955481)
                  mul r0.w, r0.w, l(1.442695)
                  exp r0.w, r0.w
                  mul r0.w, r0.w, l(0.123278)
                  mul r0.w, r0.w, l(0.078000)
                  add r5.x, r0.w, r4.x
                  mov r5.x, r5.x
                  mov r4.y, r4.y
                  mov r4.y, r4.y
                  mul r0.w, r4.y, r4.y
                  mov r0.w, -r0.w
                  div r4.x, r0.w, l(0.018099)
                  mul r4.x, r4.x, l(1.442695)
                  exp r4.x, r4.x
                  mul r4.x, r4.x, l(4.194744)
                  mul r4.x, r4.x, l(0.233000)
                  div r4.y, r0.w, l(0.136875)
                  mul r4.y, r4.y, l(1.442695)
                  exp r4.y, r4.y
                  mul r4.y, r4.y, l(1.525362)
                  mul r4.y, r4.y, l(0.100000)
                  add r4.x, r4.y, r4.x
                  div r4.y, r0.w, l(0.528836)
                  mul r4.y, r4.y, l(1.442695)
                  exp r4.y, r4.y
                  mul r4.y, r4.y, l(0.776023)
                  mul r4.y, r4.y, l(0.118000)
                  add r4.x, r4.y, r4.x
                  div r4.y, r0.w, l(1.603476)
                  mul r4.y, r4.y, l(1.442695)
                  exp r4.y, r4.y
                  mul r4.y, r4.y, l(0.445660)
                  mul r4.y, r4.y, l(0.113000)
                  add r4.x, r4.y, r4.x
                  div r4.y, r0.w, l(5.627720)
                  mul r4.y, r4.y, l(1.442695)
                  exp r4.y, r4.y
                  mul r4.y, r4.y, l(0.237886)
                  mul r4.y, r4.y, l(0.358000)
                  add r4.x, r4.y, r4.x
                  div r0.w, r0.w, l(20.955481)
                  mul r0.w, r0.w, l(1.442695)
                  exp r0.w, r0.w
                  mul r0.w, r0.w, l(0.123278)
                  mul r0.w, r0.w, l(0.078000)
                  add r5.y, r0.w, r4.x
                  mov r5.y, r5.y
                  mov r4.z, r4.z
                  mov r4.z, r4.z
                  mul r0.w, r4.z, r4.z
                  mov r0.w, -r0.w
                  div r4.x, r0.w, l(0.018099)
                  mul r4.x, r4.x, l(1.442695)
                  exp r4.x, r4.x
                  mul r4.x, r4.x, l(4.194744)
                  mul r4.x, r4.x, l(0.233000)
                  div r4.y, r0.w, l(0.136875)
                  mul r4.y, r4.y, l(1.442695)
                  exp r4.y, r4.y
                  mul r4.y, r4.y, l(1.525362)
                  mul r4.y, r4.y, l(0.100000)
                  add r4.x, r4.y, r4.x
                  div r4.y, r0.w, l(0.528836)
                  mul r4.y, r4.y, l(1.442695)
                  exp r4.y, r4.y
                  mul r4.y, r4.y, l(0.776023)
                  mul r4.y, r4.y, l(0.118000)
                  add r4.x, r4.y, r4.x
                  div r4.y, r0.w, l(1.603476)
                  mul r4.y, r4.y, l(1.442695)
                  exp r4.y, r4.y
                  mul r4.y, r4.y, l(0.445660)
                  mul r4.y, r4.y, l(0.113000)
                  add r4.x, r4.y, r4.x
                  div r4.y, r0.w, l(5.627720)
                  mul r4.y, r4.y, l(1.442695)
                  exp r4.y, r4.y
                  mul r4.y, r4.y, l(0.237886)
                  mul r4.y, r4.y, l(0.358000)
                  add r4.x, r4.y, r4.x
                  div r0.w, r0.w, l(20.955481)
                  mul r0.w, r0.w, l(1.442695)
                  exp r0.w, r0.w
                  mul r0.w, r0.w, l(0.123278)
                  mul r0.w, r0.w, l(0.078000)
                  add r5.z, r0.w, r4.x
                  mov r5.z, r5.z
                  max r0.w, r3.w, l(0.000000)
                  min r0.w, r0.w, l(1.000000)
                  mov r4.xyzw, -r5.xyzw
                  add r4.xyzw, r2.xyzw, r4.xyzw
                  mul r4.xyzw, r0.wwww, r4.xyzw
                  add r4.xyzw, r4.xyzw, r5.xyzw
                  mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                  add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                  mul r5.xyz, r0.xyzx, r2.zzzz
                  mul r2.xzw, r0.xxyz, r2.xxxx
                  mov r6.xyz, -r0.xyzx
                  mul r6.xyz, r2.yyyy, r6.xyzx
                  add r2.xyz, r2.xzwx, r6.xyzx
                  add r2.xyz, r2.xyzx, r5.xyzx
                  dp3 r2.w, r2.xyzx, r2.xyzx
                  rsq r2.w, r2.w
                  mul r2.xyz, r2.wwww, r2.xyzx
                  mul r2.w, r4.w, l(40.000000)
                  mul r2.w, r2.w, l(128.000000)
                  dp3 r2.x, l(0.888270, 0.324790, 0.324790, 0.000000), r2.xyzx
                  max r2.x, r2.x, l(0.001000)
                  log r2.x, r2.x
                  mul r2.x, r2.x, r2.w
                  exp r2.x, r2.x
                  mul r2.xyzw, r2.xxxx, l(0.094000, 0.114000, 0.173000, 1.000000)
                  mov r3.xyz, r4.xyzx
                  mov r5.xyzw, -r3.xyzw
                  add r4.xyzw, r4.xyzw, r5.xyzw
                  mul r4.xyzw, r0.wwww, r4.xyzw
                  add r4.xyzw, r3.xyzw, r4.xyzw
                  mov r1.w, r3.w
                  mul r4.xyzw, r1.xyzw, r4.xyzw
                  add r3.xyzw, r2.xyzw, r4.xyzw
                else 
                  mov r3.xyz, r1.xyzx
                endif 
                ine r0.w, l(0, 0, 0, 0), cb1[15].y
                ieq r0.w, r0.w, l(-1)
                if_nz r0.w
                  add r1.xy, v3.xyxx, cb0[0].xyxx
                  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
                  mov x0[0].xyz, r1.xyzx
                  add r1.xy, v3.xyxx, cb0[1].xyxx
                  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
                  mov x0[1].xyz, r1.xyzx
                  add r1.xy, v3.xyxx, cb0[2].xyxx
                  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
                  mov x0[2].xyz, r1.xyzx
                  add r1.xy, v3.xyxx, cb0[3].xyxx
                  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
                  mov x0[3].xyz, r1.xyzx
                  add r1.xy, v3.xyxx, cb0[4].xyxx
                  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
                  mov x0[4].xyz, r1.xyzx
                  add r1.xy, v3.xyxx, cb0[5].xyxx
                  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
                  mov x0[5].xyz, r1.xyzx
                  add r1.xy, v3.xyxx, cb0[6].xyxx
                  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
                  mov x0[6].xyz, r1.xyzx
                  add r1.xy, v3.xyxx, cb0[7].xyxx
                  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
                  mov x0[7].xyz, r1.xyzx
                  add r1.xy, v3.xyxx, cb0[8].xyxx
                  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t0.xyzw, s0
                  mov x0[8].xyz, r1.xyzx
                  mov r0.w, l(0)
                  mov r1.x, r0.w
                  loop 
                    ilt r1.y, r1.x, l(9)
                    breakc_z r1.y
                    mov r1.y, r1.x
                    mov r2.xyz, x0[r1.y + 0].xyzx
                    dp3 r1.z, r2.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
                    mov x1[r1.y + 0].x, r1.z
                    iadd r1.x, r1.x, l(1)
                  endloop 
                  mov r0.w, x1[2].x
                  mov r1.x, x1[8].x
                  add r1.y, r0.w, r1.x
                  mov r1.z, x1[5].x
                  mul r1.z, r1.z, l(2.000000)
                  add r1.y, r1.z, r1.y
                  mov r1.z, x1[0].x
                  mov r1.z, -r1.z
                  add r1.y, r1.z, r1.y
                  mov r1.w, x1[3].x
                  mul r1.w, r1.w, l(2.000000)
                  mov r1.w, -r1.w
                  add r1.y, r1.w, r1.y
                  mov r1.w, x1[6].x
                  mov r2.x, -r1.w
                  add r1.y, r1.y, r2.x
                  mov r2.x, x1[7].x
                  mul r2.x, r2.x, l(2.000000)
                  add r1.w, r1.w, r2.x
                  add r1.x, r1.x, r1.w
                  add r1.x, r1.z, r1.x
                  mov r1.z, x1[1].x
                  mul r1.z, r1.z, l(2.000000)
                  mov r1.z, -r1.z
                  add r1.x, r1.z, r1.x
                  mov r0.w, -r0.w
                  add r0.w, r0.w, r1.x
                  mul r1.x, r1.y, r1.y
                  mul r0.w, r0.w, r0.w
                  add r0.w, r0.w, r1.x
                  lt r0.w, r0.w, l(0.100000)
                  movc r0.w, r0.w, l(1.000000), l(0)
                  mul r3.xyz, r0.wwww, r3.xyzx
                endif 
                ine r0.w, l(0, 0, 0, 0), cb1[15].z
                and r0.w, r0.w, l(1)
                ieq r0.w, r0.w, l(1)
                if_nz r0.w
                  mov r1.xyz, r3.xyzx
                  dp3 r0.w, l(1.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
                  lt r1.w, r0.w, l(0.000000)
                  if_nz r1.w
                    mov r0.w, l(0)
                  endif 
                  mul r1.xyz, r1.xyzx, r3.xyzx
                  mul r1.xyz, r1.xyzx, l(30.000000, 30.000000, 30.000000, 0.000000)
                  ge r1.w, r0.w, l(0.900000)
                  if_nz r1.w
                    mul r2.xyz, r1.xyzx, l(0.900000, 0.900000, 0.900000, 0.000000)
                  else 
                    ge r1.w, r0.w, l(0.750000)
                    if_nz r1.w
                      mul r2.xyz, r1.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000)
                    else 
                      ge r0.w, r0.w, l(0.500000)
                      if_nz r0.w
                        mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                      else 
                        mul r2.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
                      endif 
                    endif 
                  endif 
                  div r3.xyz, r2.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
                endif 
                ine r0.w, l(0, 0, 0, 0), cb1[16].y
                ieq r0.w, r0.w, l(-1)
                if_nz r0.w
                  add r1.xyz, v4.xyzx, cb1[16].xxxx
                  dp3 r0.w, r1.xyzx, r1.xyzx
                  rsq r0.w, r0.w
                  mul r2.xyz, r0.wwww, r1.xyzx
                  mov r2.xyz, -r2.xyzx
                  dp3 r0.w, r2.xyzx, r0.xyzx
                  add r0.w, r0.w, r0.w
                  mov r0.w, -r0.w
                  mul r0.xyz, r0.wwww, r0.xyzx
                  add r0.xyz, r2.xyzx, r0.xyzx
                  dp3 r0.x, r0.xyzx, r3.xyzx
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  sample_indexable(texture2d)(float,float,float,float) r0.y, v3.xyxx, t1.yxzw, s0
                  mul r2.xyz, r1.xyzx, l(0.700000, 0.700000, 0.700000, 0.000000)
                  mul r0.z, r0.y, l(9.000000)
                  add r2.xyz, r0.zzzz, r2.xyzx
                  mul r1.xyz, r1.xyzx, l(10.000000, 10.000000, 10.000000, 0.000000)
                  add r1.xyz, r1.xyzx, r2.xyzx
                  frc r1.xyz, r1.xyzx
                  mov r2.xyz, -r1.xyzx
                  add r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r1.xyz, r1.xyzx, r2.xyzx
                  add r0.z, r1.y, r1.x
                  add r0.z, r1.z, r0.z
                  mul r0.z, r0.z, l(7.000000)
                  mov r0.z, -r0.z
                  add r0.z, r0.z, l(1.000000)
                  max r0.z, r0.z, l(0.000000)
                  min r0.z, r0.z, l(1.000000)
                  log r0.x, r0.x
                  mul r0.w, r0.x, l(24.000000)
                  exp r0.w, r0.w
                  mul r0.x, r0.x, l(1.500000)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, r0.z
                  mul r0.y, r0.y, l(0.500000)
                  add r0.y, r0.y, l(0.500000)
                  mul r1.xyzw, r3.xyzw, r0.yyyy
                  mul r1.xyzw, r3.xyzw, r1.xyzw
                  mul r1.xyzw, r1.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000)
                  mul r0.y, r0.w, l(0.500000)
                  add r1.xyzw, r0.yyyy, r1.xyzw
                  mul r0.x, r0.x, l(1000.000000)
                  add r3.xyzw, r0.xxxx, r1.xyzw
                endif 
                ine r0.x, l(0, 0, 0, 0), cb1[16].z
                ieq r0.x, r0.x, l(-1)
                if_nz r0.x
                  div r0.x, v5.x, v5.w
                  div r0.x, r0.x, l(2.000000)
                  add r0.x, r0.x, l(0.500000)
                  mov r0.z, -v5.y
                  div r0.z, r0.z, v5.w
                  div r0.z, r0.z, l(2.000000)
                  add r0.y, r0.z, l(0.500000)
                  sample_indexable(texture2d)(float,float,float,float) r0.zw, v3.xyxx, t1.zwxy, s0
                  mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                  add r0.zw, r0.zzzw, l(0.000000, 0.000000, -1.000000, -1.000000)
                  mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.020000, 0.020000)
                  add r0.xy, r0.zwzz, r0.xyxx
                  add r0.xy, r0.xyxx, cb1[16].xxxx
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t1.xyzw, s0
                  mov r1.xyzw, -r0.xyzw
                  add r1.xyzw, r1.xyzw, r3.xyzw
                  mul r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
                  add r3.xyzw, r0.xyzw, r1.xyzw
                endif 
                ine r0.x, l(0, 0, 0, 0), cb1[15].w
                and r0.x, r0.x, l(1)
                ieq r0.x, r0.x, l(1)
                if_nz r0.x
                  mov r0.x, v1.z
                  mov r0.x, -r0.x
                  add r0.x, r0.x, cb1[13].x
                  mov r0.y, -cb1[12].w
                  add r0.y, r0.y, cb1[13].x
                  div r0.x, r0.x, r0.y
                  mul r0.yzw, r3.xxyz, r0.xxxx
                  mov r0.x, -r0.x
                  add r0.x, r0.x, l(1.000000)
                  mul r1.xyz, r0.xxxx, cb1[14].xyzx
                  add r3.xyz, r0.yzwy, r1.xyzx
                endif 
                mov o0.xyz, r3.xyzx
                mov o0.w, r3.w
                ret 
                // Approximately 437 instruction slots used
                            
            };
        }

    }

}

