//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

//
// 2 local object(s)
//
Texture2D gDiffuseMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 7 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw
                dp4 r4.y, r0.xyzw, cb0[13].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 9
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w
                div r1.xyz, r1.xyzx, r0.wwww
                mov r2.xyz, cb1[16].xyzx
                mov r3.xyz, cb1[17].xyzx
                mov r4.xyzw, cb1[18].xyzw
                mov r5.xyz, cb0[0].xyzx
                mov r6.xyz, cb0[1].xyzx
                mov r7.xyz, cb0[2].xyzx
                mov r8.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r8.xyz, -r8.xyzx
                mul r2.xyz, r2.xyzx, r5.xyzx
                dp3 r0.w, r8.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r5.xyz, -r8.xyzx
                dp3 r2.w, r5.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r0.xyz, r0.xyzx, r2.wwww
                add r0.xyz, r5.xyzx, r0.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x
                mul r0.yzw, r3.xxyz, r0.wwww
                mul r0.yzw, r6.xxyz, r0.yyzw
                mul r1.xyz, r4.xyzx, r0.xxxx
                mul r1.xyz, r7.xyzx, r1.xyzx
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)
                mov r2.xyz, r2.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r0.xyz, r0.xyzx, r2.xyzx
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r1.xyzx, r0.xyzx
                mul r0.w, cb1[17].w, l(1.000000)
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 51 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw
                dp4 r4.y, r0.xyzw, cb0[13].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 12
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w
                div r1.xyz, r1.xyzx, r0.wwww
                mov r2.xyz, cb1[16].xyzx
                mov r3.xyz, cb1[17].xyzx
                mov r4.xyzw, cb1[18].xyzw
                mov r5.xyz, cb0[0].xyzx
                mov r6.xyz, cb0[1].xyzx
                mov r7.xyz, cb0[2].xyzx
                mov r8.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r8.xyz, -r8.xyzx
                mul r5.xyz, r2.xyzx, r5.xyzx
                dp3 r0.w, r8.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r8.xyz, -r8.xyzx
                dp3 r2.w, r8.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r9.xyz, r0.xyzx, r2.wwww
                add r8.xyz, r8.xyzx, r9.xyzx
                dp3 r2.w, r8.xyzx, r1.xyzx
                max r2.w, r2.w, l(0.000000)
                log r2.w, r2.w
                mul r2.w, r2.w, r4.w
                exp r2.w, r2.w
                mul r8.xyz, r3.xyzx, r0.wwww
                mul r6.xyz, r6.xyzx, r8.xyzx
                mul r8.xyz, r4.xyzx, r2.wwww
                mul r7.xyz, r7.xyzx, r8.xyzx
                movc r6.xyz, r1.wwww, r6.xyzx, l(0,0,0,0)
                movc r7.xyz, r1.wwww, r7.xyzx, l(0,0,0,0)
                mov r5.xyz, r5.xyzx
                mov r6.xyz, r6.xyzx
                mov r7.xyz, r7.xyzx
                add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                mov r8.xyz, cb0[4].xyzx
                mov r9.xyz, cb0[5].xyzx
                mov r10.xyz, cb0[6].xyzx
                mov r11.xyz, cb0[7].xyzx
                mov r11.xyz, -r11.xyzx
                mul r2.xyz, r2.xyzx, r8.xyzx
                dp3 r0.w, r11.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r8.xyz, -r11.xyzx
                dp3 r2.w, r8.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r0.xyz, r0.xyzx, r2.wwww
                add r0.xyz, r8.xyzx, r0.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x
                mul r0.yzw, r3.xxyz, r0.wwww
                mul r0.yzw, r9.xxyz, r0.yyzw
                mul r1.xyz, r4.xyzx, r0.xxxx
                mul r1.xyz, r10.xyzx, r1.xyzx
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)
                mov r2.xyz, r2.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                add r2.xyz, r2.xyzx, r5.xyzx
                add r0.xyz, r0.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r7.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r1.xyzx, r0.xyzx
                mul r0.w, cb1[17].w, l(1.000000)
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 82 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw
                dp4 r4.y, r0.xyzw, cb0[13].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 13
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w
                div r1.xyz, r1.xyzx, r0.wwww
                mov r2.xyz, cb1[16].xyzx
                mov r3.xyz, cb1[17].xyzx
                mov r4.xyzw, cb1[18].xyzw
                mov r5.xyz, cb0[0].xyzx
                mov r6.xyz, cb0[1].xyzx
                mov r7.xyz, cb0[2].xyzx
                mov r8.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r8.xyz, -r8.xyzx
                mul r5.xyz, r2.xyzx, r5.xyzx
                dp3 r0.w, r8.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r8.xyz, -r8.xyzx
                dp3 r2.w, r8.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r9.xyz, r0.xyzx, r2.wwww
                add r8.xyz, r8.xyzx, r9.xyzx
                dp3 r2.w, r8.xyzx, r1.xyzx
                max r2.w, r2.w, l(0.000000)
                log r2.w, r2.w
                mul r2.w, r2.w, r4.w
                exp r2.w, r2.w
                mul r8.xyz, r3.xyzx, r0.wwww
                mul r6.xyz, r6.xyzx, r8.xyzx
                mul r8.xyz, r4.xyzx, r2.wwww
                mul r7.xyz, r7.xyzx, r8.xyzx
                movc r6.xyz, r1.wwww, r6.xyzx, l(0,0,0,0)
                movc r7.xyz, r1.wwww, r7.xyzx, l(0,0,0,0)
                mov r5.xyz, r5.xyzx
                mov r6.xyz, r6.xyzx
                mov r7.xyz, r7.xyzx
                add r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                mov r8.xyz, cb0[4].xyzx
                mov r9.xyz, cb0[5].xyzx
                mov r10.xyz, cb0[6].xyzx
                mov r11.xyz, cb0[7].xyzx
                mov r11.xyz, -r11.xyzx
                mul r8.xyz, r2.xyzx, r8.xyzx
                dp3 r0.w, r11.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r11.xyz, -r11.xyzx
                dp3 r2.w, r11.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r12.xyz, r0.xyzx, r2.wwww
                add r11.xyz, r11.xyzx, r12.xyzx
                dp3 r2.w, r11.xyzx, r1.xyzx
                max r2.w, r2.w, l(0.000000)
                log r2.w, r2.w
                mul r2.w, r2.w, r4.w
                exp r2.w, r2.w
                mul r11.xyz, r3.xyzx, r0.wwww
                mul r9.xyz, r9.xyzx, r11.xyzx
                mul r11.xyz, r4.xyzx, r2.wwww
                mul r10.xyz, r10.xyzx, r11.xyzx
                movc r9.xyz, r1.wwww, r9.xyzx, l(0,0,0,0)
                movc r10.xyz, r1.wwww, r10.xyzx, l(0,0,0,0)
                mov r8.xyz, r8.xyzx
                mov r9.xyz, r9.xyzx
                mov r10.xyz, r10.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                add r6.xyz, r6.xyzx, r9.xyzx
                add r7.xyz, r7.xyzx, r10.xyzx
                mov r8.xyz, cb0[8].xyzx
                mov r9.xyz, cb0[9].xyzx
                mov r10.xyz, cb0[10].xyzx
                mov r11.xyz, cb0[11].xyzx
                mov r11.xyz, -r11.xyzx
                mul r2.xyz, r2.xyzx, r8.xyzx
                dp3 r0.w, r11.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r8.xyz, -r11.xyzx
                dp3 r2.w, r8.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r0.xyz, r0.xyzx, r2.wwww
                add r0.xyz, r8.xyzx, r0.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r4.w
                exp r0.x, r0.x
                mul r0.yzw, r3.xxyz, r0.wwww
                mul r0.yzw, r9.xxyz, r0.yyzw
                mul r1.xyz, r4.xyzx, r0.xxxx
                mul r1.xyz, r10.xyzx, r1.xyzx
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)
                mov r2.xyz, r2.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                add r2.xyz, r2.xyzx, r5.xyzx
                add r0.xyz, r0.xyzx, r6.xyzx
                add r1.xyz, r1.xyzx, r7.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r1.xyzx, r0.xyzx
                mul r0.w, cb1[17].w, l(1.000000)
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 113 instruction slots used
                            
            };
        }

    }

    technique11 Light0Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw
                dp4 r4.y, r0.xyzw, cb0[13].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx
                mul r0.w, r0.w, cb0[17].w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light1Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw
                dp4 r4.y, r0.xyzw, cb0[13].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 10
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w
                div r1.xyz, r1.xyzx, r0.wwww
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                mov r3.xyz, cb1[16].xyzx
                mov r4.xyz, cb1[17].xyzx
                mov r5.xyzw, cb1[18].xyzw
                mov r6.xyz, cb0[0].xyzx
                mov r7.xyz, cb0[1].xyzx
                mov r8.xyz, cb0[2].xyzx
                mov r9.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r9.xyz, -r9.xyzx
                mul r3.xyz, r3.xyzx, r6.xyzx
                dp3 r0.w, r9.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r6.xyz, -r9.xyzx
                dp3 r3.w, r6.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r6.xyzx, r0.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x
                mul r0.yzw, r4.xxyz, r0.wwww
                mul r0.yzw, r7.xxyz, r0.yyzw
                mul r1.xyz, r5.xyzx, r0.xxxx
                mul r1.xyz, r8.xyzx, r1.xyzx
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                add r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx
                mul r0.w, r2.w, cb1[17].w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 52 instruction slots used
                            
            };
        }

    }

    technique11 Light2Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw
                dp4 r4.y, r0.xyzw, cb0[13].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 13
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w
                div r1.xyz, r1.xyzx, r0.wwww
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                mov r3.xyz, cb1[16].xyzx
                mov r4.xyz, cb1[17].xyzx
                mov r5.xyzw, cb1[18].xyzw
                mov r6.xyz, cb0[0].xyzx
                mov r7.xyz, cb0[1].xyzx
                mov r8.xyz, cb0[2].xyzx
                mov r9.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r9.xyz, -r9.xyzx
                mul r6.xyz, r3.xyzx, r6.xyzx
                dp3 r0.w, r9.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r9.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r10.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r10.xyzx
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r5.w
                exp r3.w, r3.w
                mul r9.xyz, r4.xyzx, r0.wwww
                mul r7.xyz, r7.xyzx, r9.xyzx
                mul r9.xyz, r5.xyzx, r3.wwww
                mul r8.xyz, r8.xyzx, r9.xyzx
                movc r7.xyz, r1.wwww, r7.xyzx, l(0,0,0,0)
                movc r8.xyz, r1.wwww, r8.xyzx, l(0,0,0,0)
                mov r6.xyz, r6.xyzx
                mov r7.xyz, r7.xyzx
                mov r8.xyz, r8.xyzx
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r8.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                mov r9.xyz, cb0[4].xyzx
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx
                mov r12.xyz, -r12.xyzx
                mul r3.xyz, r3.xyzx, r9.xyzx
                dp3 r0.w, r12.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x
                mul r0.yzw, r4.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw
                mul r1.xyz, r5.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r7.xyzx
                add r1.xyz, r1.xyzx, r8.xyzx
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx
                mul r0.w, r2.w, cb1[17].w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 83 instruction slots used
                            
            };
        }

    }

    technique11 Light3Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw
                dp4 r4.y, r0.xyzw, cb0[13].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r4.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[13], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 14
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w
                div r1.xyz, r1.xyzx, r0.wwww
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                mov r3.xyz, cb1[16].xyzx
                mov r4.xyz, cb1[17].xyzx
                mov r5.xyzw, cb1[18].xyzw
                mov r6.xyz, cb0[0].xyzx
                mov r7.xyz, cb0[1].xyzx
                mov r8.xyz, cb0[2].xyzx
                mov r9.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r9.xyz, -r9.xyzx
                mul r6.xyz, r3.xyzx, r6.xyzx
                dp3 r0.w, r9.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r9.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r10.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r10.xyzx
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r5.w
                exp r3.w, r3.w
                mul r9.xyz, r4.xyzx, r0.wwww
                mul r7.xyz, r7.xyzx, r9.xyzx
                mul r9.xyz, r5.xyzx, r3.wwww
                mul r8.xyz, r8.xyzx, r9.xyzx
                movc r7.xyz, r1.wwww, r7.xyzx, l(0,0,0,0)
                movc r8.xyz, r1.wwww, r8.xyzx, l(0,0,0,0)
                mov r6.xyz, r6.xyzx
                mov r7.xyz, r7.xyzx
                mov r8.xyz, r8.xyzx
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r8.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                mov r9.xyz, cb0[4].xyzx
                mov r10.xyz, cb0[5].xyzx
                mov r11.xyz, cb0[6].xyzx
                mov r12.xyz, cb0[7].xyzx
                mov r12.xyz, -r12.xyzx
                mul r9.xyz, r3.xyzx, r9.xyzx
                dp3 r0.w, r12.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r12.xyz, -r12.xyzx
                dp3 r3.w, r12.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r13.xyz, r0.xyzx, r3.wwww
                add r12.xyz, r12.xyzx, r13.xyzx
                dp3 r3.w, r12.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r5.w
                exp r3.w, r3.w
                mul r12.xyz, r4.xyzx, r0.wwww
                mul r10.xyz, r10.xyzx, r12.xyzx
                mul r12.xyz, r5.xyzx, r3.wwww
                mul r11.xyz, r11.xyzx, r12.xyzx
                movc r10.xyz, r1.wwww, r10.xyzx, l(0,0,0,0)
                movc r11.xyz, r1.wwww, r11.xyzx, l(0,0,0,0)
                mov r9.xyz, r9.xyzx
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r6.xyz, r6.xyzx, r9.xyzx
                add r7.xyz, r7.xyzx, r10.xyzx
                add r8.xyz, r8.xyzx, r11.xyzx
                mov r9.xyz, cb0[8].xyzx
                mov r10.xyz, cb0[9].xyzx
                mov r11.xyz, cb0[10].xyzx
                mov r12.xyz, cb0[11].xyzx
                mov r12.xyz, -r12.xyzx
                mul r3.xyz, r3.xyzx, r9.xyzx
                dp3 r0.w, r12.xyzx, r0.xyzx
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x
                mul r0.yzw, r4.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw
                mul r1.xyz, r5.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx
                movc r0.xyz, r1.wwww, r0.yzwy, l(0,0,0,0)
                movc r1.xyz, r1.wwww, r1.xyzx, l(0,0,0,0)
                mov r3.xyz, r3.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                add r3.xyz, r3.xyzx, r6.xyzx
                add r0.xyz, r0.xyzx, r7.xyzx
                add r1.xyz, r1.xyzx, r8.xyzx
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx
                mul r0.w, r2.w, cb1[17].w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 114 instruction slots used
                            
            };
        }

    }

}

